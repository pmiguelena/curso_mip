[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Introducción al curso",
    "section": "",
    "text": "Este sitio web acompaña el desarrollo del programa de formación en análisis de impacto, con recursos, contenidos prácticos y ejemplos interactivos construidos en R.\nA lo largo del curso, abordaremos herramientas fundamentales para transformar datos en información útil para la toma de decisiones. La formación está orientada a fortalecer capacidades en cada etapa del proceso analítico, desde la recolección de datos hasta la interpretación de resultados."
  },
  {
    "objectID": "index.html#bienvenidos",
    "href": "index.html#bienvenidos",
    "title": "Introducción al curso",
    "section": "",
    "text": "Este sitio web acompaña el desarrollo del programa de formación en análisis de impacto, con recursos, contenidos prácticos y ejemplos interactivos construidos en R.\nA lo largo del curso, abordaremos herramientas fundamentales para transformar datos en información útil para la toma de decisiones. La formación está orientada a fortalecer capacidades en cada etapa del proceso analítico, desde la recolección de datos hasta la interpretación de resultados."
  },
  {
    "objectID": "index.html#docente-a-cargo",
    "href": "index.html#docente-a-cargo",
    "title": "Introducción al curso",
    "section": "Docente a cargo",
    "text": "Docente a cargo\nEl docente a cargo del curso será el profesor Gabriel Michelena (MESi-IIEP-UBA). Email: pmiguelena@gmail.com"
  },
  {
    "objectID": "index.html#objetivos-del-programa",
    "href": "index.html#objetivos-del-programa",
    "title": "Introducción al curso",
    "section": "Objetivos del programa",
    "text": "Objetivos del programa\nLos objetivos específicos de esta capacitación son:\n\nCapacitar en el proceso de recolección y procesamiento de datos, incluyendo su organización, limpieza y validación.\nCapacitar en la elaboración de indicadores y estadísticas descriptivas que permitan formalizar los impactos en términos de costos y beneficios.\nBrindar formación en el uso de herramientas estadísticas y computacionales para el análisis de impacto, con énfasis en aplicaciones prácticas mediante el lenguaje R.\n\nAcompañanos en este recorrido para dominar las herramientas esenciales que permiten convertir evidencia en acción."
  },
  {
    "objectID": "index.html#programa",
    "href": "index.html#programa",
    "title": "Introducción al curso",
    "section": "Programa",
    "text": "Programa\n\n\n\n\n\n\n\nClase\nContenido\n\n\n\n\n1\n\nClase Introductoria R Paquete de software estadístico utilizado principalmente por instituciones académicas y de investigación. Introducción al entorno de trabajo R, gestión de bases de datos, creación y modificación de variables.\n\n\n2\nEl paquete Tydiverse y ggplot. Elaboración de tablas y gráficos. Importación y exportación de datos.\n\n\n3\nDesarrollo de operaciones complejas, loops y regresiones.\n\n\n4\nMatriz insumo producto como herramienta de análisis económico. El modelo abierto Leontief: fundamentos y limitaciones. Multiplicadores. Obtención de resultados relacionados con la producción y el empleo.\n\n\n5\nEvaluación de políticas mediante el modelo Insumo Producto.\n\n\n6\nTrabajo final: simulación de un proyecto o programa."
  },
  {
    "objectID": "clase_1.html",
    "href": "clase_1.html",
    "title": "CLASE 1",
    "section": "",
    "text": "R es un lenguaje de programación diseñado específicamente para el procesamiento, modelado y análisis estadístico de datos. Su principal fortaleza radica en su flexibilidad y en la gran variedad de herramientas estadísticas y gráficas que ofrece.\nUna de sus características distintivas es que se trata de software libre (https://www.r-project.org/), lo que significa que cualquier persona puede utilizarlo, modificarlo y distribuirlo sin costo. Su estructura se basa en una sintaxis básica conocida como R base, que permite realizar operaciones estadísticas simples y complejas con facilidad.\nAdemás, R se caracteriza por tener una sintaxis incremental, ya que su funcionalidad se puede ampliar mediante paquetes desarrollados por terceros. Esta extensibilidad ha permitido que se consolide como una de las principales plataformas de análisis en múltiples disciplinas.\nR también es reconocido por su capacidad para generar gráficos con calidad de publicación, lo que lo convierte en una herramienta ideal para informes técnicos, papers académicos y presentaciones profesionales.\nFinalmente, R cuenta con una amplia comunidad de usuarios y desarrolladores en todo el mundo. Esta comunidad activa contribuye continuamente al desarrollo de nuevos paquetes, documentación, foros de ayuda y recursos educativos que fortalecen y enriquecen el ecosistema del lenguaje.\n\n\n\nR presenta una serie de ventajas importantes frente a Stata, especialmente para quienes buscan una herramienta potente, flexible y accesible para el análisis de datos:\n\nEs gratuito: R es completamente libre y de código abierto. A diferencia de Stata, no requiere licencias de pago, lo que lo hace ideal tanto para instituciones públicas como para estudiantes y profesionales independientes.\nAlta potencia computacional: R permite realizar análisis estadísticos complejos, modelado avanzado y procesamiento masivo de datos, gracias a su arquitectura extensible y a la amplia variedad de paquetes disponibles.\nVelocidad: Con el uso adecuado de paquetes optimizados (como data.table o dplyr), R puede ser muy eficiente en el manejo de grandes volúmenes de datos.\nCompatibilidad con otros lenguajes: R se integra fácilmente con otros lenguajes como Python, C++, SQL y Julia, lo que permite construir flujos de trabajo más completos y personalizados.\nManejo de microdatos en memoria virtual: A diferencia de Stata, R permite trabajar con múltiples conjuntos de microdatos de forma simultánea sin necesidad de cargarlos físicamente al entorno, lo cual mejora la eficiencia y facilita comparaciones entre bases.\nAplicaciones avanzadas: R incluye herramientas para aprendizaje automático (machine learning), redes neuronales profundas (deep neural networks) y otras técnicas de inteligencia artificial, que amplían significativamente sus posibilidades de aplicación en áreas emergentes.\n\n\n\n\nRStudio es un entorno de desarrollo integrado (IDE) diseñado específicamente para utilizar el lenguaje R de manera más amigable y eficiente. Aunque R puede ejecutarse desde una consola básica, RStudio ofrece una interfaz visual intuitiva que facilita enormemente la escritura de código, la organización de proyectos y la visualización de resultados.\nEste entorno permite correr comandos, gestionar scripts, visualizar gráficos, explorar datasets y utilizar extensiones del lenguaje R, todo desde una misma plataforma. Incluye herramientas como autocompletado, resaltado de sintaxis, paneles para archivos y gráficos, y soporte para R Markdown, entre muchas otras funcionalidades.\nAdemás, RStudio es gratuito (https://www.posit.co/download/rstudio-desktop/) y de código abierto, y puede descargarse fácilmente desde su sitio web oficial.\nGracias a su facilidad de uso y potencia, RStudio se ha convertido en el entorno más utilizado por estudiantes, investigadores y profesionales que trabajan con análisis de datos en R.\n\n\n\nConsola del Rstudio"
  },
  {
    "objectID": "clase_1.html#qué-es-r",
    "href": "clase_1.html#qué-es-r",
    "title": "CLASE 1",
    "section": "",
    "text": "R es un lenguaje de programación diseñado específicamente para el procesamiento, modelado y análisis estadístico de datos. Su principal fortaleza radica en su flexibilidad y en la gran variedad de herramientas estadísticas y gráficas que ofrece.\nUna de sus características distintivas es que se trata de software libre (https://www.r-project.org/), lo que significa que cualquier persona puede utilizarlo, modificarlo y distribuirlo sin costo. Su estructura se basa en una sintaxis básica conocida como R base, que permite realizar operaciones estadísticas simples y complejas con facilidad.\nAdemás, R se caracteriza por tener una sintaxis incremental, ya que su funcionalidad se puede ampliar mediante paquetes desarrollados por terceros. Esta extensibilidad ha permitido que se consolide como una de las principales plataformas de análisis en múltiples disciplinas.\nR también es reconocido por su capacidad para generar gráficos con calidad de publicación, lo que lo convierte en una herramienta ideal para informes técnicos, papers académicos y presentaciones profesionales.\nFinalmente, R cuenta con una amplia comunidad de usuarios y desarrolladores en todo el mundo. Esta comunidad activa contribuye continuamente al desarrollo de nuevos paquetes, documentación, foros de ayuda y recursos educativos que fortalecen y enriquecen el ecosistema del lenguaje."
  },
  {
    "objectID": "clase_1.html#r-vs-sta",
    "href": "clase_1.html#r-vs-sta",
    "title": "CLASE 1",
    "section": "",
    "text": "R presenta una serie de ventajas importantes frente a Stata, especialmente para quienes buscan una herramienta potente, flexible y accesible para el análisis de datos:\n\nEs gratuito: R es completamente libre y de código abierto. A diferencia de Stata, no requiere licencias de pago, lo que lo hace ideal tanto para instituciones públicas como para estudiantes y profesionales independientes.\nAlta potencia computacional: R permite realizar análisis estadísticos complejos, modelado avanzado y procesamiento masivo de datos, gracias a su arquitectura extensible y a la amplia variedad de paquetes disponibles.\nVelocidad: Con el uso adecuado de paquetes optimizados (como data.table o dplyr), R puede ser muy eficiente en el manejo de grandes volúmenes de datos.\nCompatibilidad con otros lenguajes: R se integra fácilmente con otros lenguajes como Python, C++, SQL y Julia, lo que permite construir flujos de trabajo más completos y personalizados.\nManejo de microdatos en memoria virtual: A diferencia de Stata, R permite trabajar con múltiples conjuntos de microdatos de forma simultánea sin necesidad de cargarlos físicamente al entorno, lo cual mejora la eficiencia y facilita comparaciones entre bases.\nAplicaciones avanzadas: R incluye herramientas para aprendizaje automático (machine learning), redes neuronales profundas (deep neural networks) y otras técnicas de inteligencia artificial, que amplían significativamente sus posibilidades de aplicación en áreas emergentes."
  },
  {
    "objectID": "clase_1.html#rstudio-el-entorno-de-trabajo-para-programar-en-r",
    "href": "clase_1.html#rstudio-el-entorno-de-trabajo-para-programar-en-r",
    "title": "CLASE 1",
    "section": "",
    "text": "RStudio es un entorno de desarrollo integrado (IDE) diseñado específicamente para utilizar el lenguaje R de manera más amigable y eficiente. Aunque R puede ejecutarse desde una consola básica, RStudio ofrece una interfaz visual intuitiva que facilita enormemente la escritura de código, la organización de proyectos y la visualización de resultados.\nEste entorno permite correr comandos, gestionar scripts, visualizar gráficos, explorar datasets y utilizar extensiones del lenguaje R, todo desde una misma plataforma. Incluye herramientas como autocompletado, resaltado de sintaxis, paneles para archivos y gráficos, y soporte para R Markdown, entre muchas otras funcionalidades.\nAdemás, RStudio es gratuito (https://www.posit.co/download/rstudio-desktop/) y de código abierto, y puede descargarse fácilmente desde su sitio web oficial.\nGracias a su facilidad de uso y potencia, RStudio se ha convertido en el entorno más utilizado por estudiantes, investigadores y profesionales que trabajan con análisis de datos en R.\n\n\n\nConsola del Rstudio"
  },
  {
    "objectID": "clase_1.html#primeros-pasos-en-rstudio-crear-un-archivo-y-cargar-librerías",
    "href": "clase_1.html#primeros-pasos-en-rstudio-crear-un-archivo-y-cargar-librerías",
    "title": "CLASE 1",
    "section": "Primeros pasos en RStudio: crear un archivo y cargar librerías",
    "text": "Primeros pasos en RStudio: crear un archivo y cargar librerías\nCuando abrimos RStudio por primera vez, el primer paso para comenzar a trabajar es crear un nuevo archivo de script en R, donde escribiremos nuestras líneas de código.\nPara hacerlo:\n\nHacé clic en File &gt; New File &gt; R Script, o bien usá el atajo Ctrl + Shift + N (Windows) / Cmd + Shift + N (Mac).\nSe abrirá una pestaña nueva donde podés comenzar a escribir comandos, guardarlos y ejecutarlos en cualquier momento.\nEn R, muchas funcionalidades avanzadas no están incluidas en la versión base, pero pueden añadirse a través de librerías (también llamadas paquetes). Estas librerías amplían las capacidades del lenguaje, permitiendo por ejemplo hacer gráficos avanzados, manipular datos, o aplicar técnicas de machine learning.\n\nPara utilizar una librería en R, hay dos pasos:\nInstalarla (una sola vez):\noptions(repos = c(CRAN = “https://cloud.r-project.org”))))\ninstall.packages(“dplyr”)\nCargarla (cada vez que abrís R):"
  },
  {
    "objectID": "clase_1.html#definición-de-objetos-en-r",
    "href": "clase_1.html#definición-de-objetos-en-r",
    "title": "CLASE 1",
    "section": "Definición de objetos en R",
    "text": "Definición de objetos en R\nEn R, los objetos son la unidad fundamental de trabajo. Todo lo que manipulamos, analizamos o visualizamos en R se representa como un objeto. Estos pueden adoptar distintas formas: desde un número individual, un vector numérico o de caracteres, hasta una función, una base de datos o incluso un gráfico.\nA medida que se crean, los objetos se almacenan en la memoria de trabajo, y pueden visualizarse en el panel superior derecho de RStudio, donde se muestra el entorno activo.\nPara definir un objeto en R, se utiliza el operador de asignación &lt;-. Este operador permite asignar un valor o conjunto de valores a un nombre. La sintaxis es:\n\nnombre_objeto &lt;- \"definición_del_objeto\"\n\nPor ejemplo:\n\nx &lt;- 5\nmi_vector &lt;- c(1, 2, 3)\n\nEn estos ejemplos, el objeto x contiene el número 5, mientras que mi_vector es un vector numérico con tres elementos.\n\n\n\nEjemplo"
  },
  {
    "objectID": "clase_1.html#vectores-en-r",
    "href": "clase_1.html#vectores-en-r",
    "title": "CLASE 1",
    "section": "Vectores en R",
    "text": "Vectores en R\nLa mayoría de las operaciones aritméticas (+, -, *, /) y funciones en R están definidas con carácter vectorial.\n¿Y qué significa esto? Que R opera componente a componente cuando trabaja con vectores.\n\n\n¿Cómo se define un vector?\nEn R, los vectores se crean con la función c() (que viene de concatenate, concatenar). Es la estructura más simple y común del lenguaje.\n\n# Un vector de números\nedades &lt;- c(23, 35, 42, 19)\n\n# Un vector de texto\nnombres &lt;- c(\"Ana\", \"Luis\", \"Pedro\")\n\n# Un vector lógico\nrespuestas &lt;- c(TRUE, FALSE, TRUE)\n\n\na &lt;- c(1, 2, 3)\nb &lt;- c(10, 20, 30)\n\na + b  # Suma componente a componente\n\n[1] 11 22 33\n\n\nA continuación se muestran ejemplos básicos de cómo crear objetos y vectores en R.\n\n# Primer comando: creo un objeto numérico\nx &lt;- 1\nx  # Resultado: 1\n\n[1] 1\n\n# Reasigno el objeto con un valor tipo texto (character)\nx &lt;- \"hola\"\nx  # Resultado: \"hola\"\n\n[1] \"hola\"\n\n# Creo un vector numérico con varios valores\nx &lt;- c(10.4, 5.6, 3.1, 6.4, 21.7)\nx  # Resultado: 10.4  5.6  3.1  6.4  21.7\n\n[1] 10.4  5.6  3.1  6.4 21.7\n\n# Creo un vector de texto (caracteres)\nx &lt;- c(\"a\", \"b\", \"c\")\nx  # Resultado: \"a\" \"b\" \"c\"\n\n[1] \"a\" \"b\" \"c\""
  },
  {
    "objectID": "clase_1.html#tipos-o-clases-de-datos-en-r",
    "href": "clase_1.html#tipos-o-clases-de-datos-en-r",
    "title": "CLASE 1",
    "section": "Tipos o clases de datos en R",
    "text": "Tipos o clases de datos en R\nLos principales tipos de datos atómicos que podés encontrar en R son:\n\ncharacter → Texto (por ejemplo: \"hola\")\nnumeric → Números decimales (por ejemplo: 3.14)\ninteger → Números enteros (por ejemplo: 4L)\ncomplex → Números complejos (por ejemplo: 2 + 3i)\nlogical → Verdadero o falso (TRUE / FALSE)\n\n\nCuando combinamos tipos distintos, R realiza coerción automática para unificarlos bajo un mismo tipo. Por ejemplo, si concatenás un número y un texto, todo se transforma en texto:\n\n\nmi_vector &lt;- c(1, \"a\", TRUE) \nclass(mi_vector)  # character\n\n[1] \"character\""
  },
  {
    "objectID": "clase_1.html#operadores-aritméticos-básicos",
    "href": "clase_1.html#operadores-aritméticos-básicos",
    "title": "CLASE 1",
    "section": "Operadores aritméticos básicos",
    "text": "Operadores aritméticos básicos\nEn R, los operadores aritméticos elementales son los habituales que usamos en matemáticas:\n\n\n\nOperador\nSignificado\nEjemplo\n\n\n\n\n+\nSuma\n2 + 3\n\n\n-\nResta\n5 - 1\n\n\n*\nMultiplicación\n4 * 2\n\n\n/\nDivisión\n10 / 2\n\n\n^\nPotencia\n2 ^ 3\n\n\n\n\n# Ejemplos básicos \n2 + 3 # Suma \n\n[1] 5\n\n5 - 1 # Resta \n\n[1] 4\n\n4 * 2 # Multiplicación \n\n[1] 8\n\n10 / 2 # División \n\n[1] 5\n\n2^3  # Potencia\n\n[1] 8"
  },
  {
    "objectID": "clase_1.html#funciones-matemáticas-comunes",
    "href": "clase_1.html#funciones-matemáticas-comunes",
    "title": "CLASE 1",
    "section": "Funciones matemáticas comunes",
    "text": "Funciones matemáticas comunes\nR también incluye muchas funciones matemáticas conocidas:\n\n\n\nFunción\nSignificado\n\n\n\n\nlog(x)\nLogaritmo natural\n\n\nexp(x)\nExponencial de x\n\n\nsqrt(x)\nRaíz cuadrada\n\n\nsin(x)\nSeno\n\n\ncos(x)\nCoseno\n\n\ntan(x)\nTangente"
  },
  {
    "objectID": "clase_1.html#otras-funciones-útiles-sobre-vectores",
    "href": "clase_1.html#otras-funciones-útiles-sobre-vectores",
    "title": "CLASE 1",
    "section": "Otras funciones útiles sobre vectores",
    "text": "Otras funciones útiles sobre vectores\nR también permite aplicar funciones estadísticas y agregadas sobre vectores numéricos:\n\n\n\nFunción\nDescripción\n\n\n\n\nmax(x)\nValor máximo\n\n\nmin(x)\nValor mínimo\n\n\nrange(x)\nRango (mínimo y máximo)\n\n\nlength(x)\nCantidad de elementos del vector\n\n\nsum(x)\nSuma total\n\n\nmean(x)\nPromedio\n\n\nprod(x)\nProducto acumulado"
  },
  {
    "objectID": "clase_1.html#operadores-lógicos-básicos",
    "href": "clase_1.html#operadores-lógicos-básicos",
    "title": "CLASE 1",
    "section": "Operadores lógicos básicos",
    "text": "Operadores lógicos básicos\nEn R, los operadores lógicos se utilizan para comparar valores. Devuelven resultados de tipo TRUE o FALSE, que pueden utilizarse para filtrar datos, construir condiciones o ejecutar decisiones.\n\n\n\n\n\n\n\n\nOperador\nSignificado\nEjemplo\n\n\n\n\n&gt;\nMayor que\n5 &gt; 3\n\n\n&gt;=\nMayor o igual que\n5 &gt;= 5\n\n\n&lt;\nMenor que\n2 &lt; 4\n\n\n&lt;=\nMenor o igual que\n3 &lt;= 3\n\n\n==\nIgual (estricto)\n4 == 4\n\n\n!=\nDistinto de\n5 != 3\n\n\n=\nNo se recomienda para comparación, solo para asignación dentro de funciones\n\n\n\n\n\n⚠️ Importante: Para verificar si dos valores son iguales, se usa ==.\nEl signo = puede funcionar como asignación, pero no se recomienda para comparaciones lógicas.\n\n\n\nEjemplos prácticos\n\n# Comparaciones básicas\n5 &gt; 3       # TRUE\n\n[1] TRUE\n\n4 == 4      # TRUE\n\n[1] TRUE\n\n2 &lt; 1       # FALSE\n\n[1] FALSE\n\n5 != 5      # FALSE\n\n[1] FALSE\n\n# Comparar vectores\nx &lt;- c(1, 2, 3)\nx &gt; 1       # Resultado: FALSE, TRUE, TRUE\n\n[1] FALSE  TRUE  TRUE"
  },
  {
    "objectID": "clase_1.html#definición-de-objetos-en-r-1",
    "href": "clase_1.html#definición-de-objetos-en-r-1",
    "title": "CLASE 1",
    "section": "Definición de objetos en R",
    "text": "Definición de objetos en R\nR es un lenguaje orientado a objetos. Casi todo lo que hacemos —desde guardar un número hasta construir modelos complejos— se basa en crear y manipular objetos.\nA continuación se presentan los principales tipos de objetos en R, todos incluidos en este mismo documento:\n\nVectores\nLos vectores son la unidad más básica de datos en R.\nContienen elementos del mismo tipo (numéricos, caracteres, lógicos, etc.).\n\nv_num &lt;- c(10, 20, 30)               # Vector numérico\nv_txt &lt;- c(\"a\", \"b\", \"c\")            # Vector de texto\nv_log &lt;- c(TRUE, FALSE, TRUE)        # Vector lógico\n\n\n\nArrays\nExtienden las matrices a más de dos dimensiones.\n\na &lt;- array(1:8, dim = c(2, 2, 2))     # Array 3D\n\n\n\nListas\nColecciones de elementos de distinto tipo o estructura.\n\n# Crear una lista\ny &lt;- list(\n  calificacion = c(\"a\", \"b\", \"c\"),\n  nota = c(10, 8, 7)\n)\n\nAcceso mediante el nombre del elemento\n\ny$calificacion        # Devuelve: \"a\" \"b\" \"c\"\n\n[1] \"a\" \"b\" \"c\"\n\ny$nota                # Devuelve: 10 8 7\n\n[1] 10  8  7\n\n\nAcceso por posición con doble corchete [[ ]]\n\ny[[1]]                # Primer elemento: \"a\" \"b\" \"c\"\n\n[1] \"a\" \"b\" \"c\"\n\ny[[2]]                # Segundo elemento: 10 8 7\n\n[1] 10  8  7\n\n\nAcceso por posición con un solo corchete [ ] devuelve una lista (no el contenido)\n\ny[2]                  # Devuelve una sublista con un solo elemento\n\n$nota\n[1] 10  8  7\n\n\nAcceso a elementos individuales dentro de componentes\n\ny[[1]][1]             # Primer valor de calificación: \"a\"\n\n[1] \"a\"\n\ny$nota[1]             # Primer valor numérico: 10\n\n[1] 10\n\n\n\n\nFactores\nRepresentan variables categóricas con niveles predefinidos\n\nniveles &lt;- factor(c(\"bajo\", \"medio\", \"alto\", \"medio\"))\n\n\n\nData Frames\nTablas con columnas que pueden tener diferentes tipos de datos.\n\ndf &lt;- data.frame(\n  nombre = c(\"Ana\", \"Luis\"),\n  edad = c(25, 30),\n  aprobado = c(TRUE, FALSE)\n)\n\n\n\nFunciones\nObjetos que encapsulan una operación. Se pueden definir funciones propias.\n\nsuma &lt;- function(x, y) {\n  return(x + y)\n}\n\nresultado &lt;- suma(3, 5)  # Resultado esperado: 8\n\n\n\nMatrices en R\nLas matrices son estructuras bidimensionales que almacenan datos del mismo tipo (numéricos, lógicos, etc.). Son fundamentales para operaciones algebraicas y manipulación de datos estructurados.\n\n# Crear una matriz 2x2\nx &lt;- matrix(c(2, 7, 3, 8), nrow = 2, ncol = 2)\nx\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    7    8\n\n\n\n# Acceder a la segunda columna\nx[, 2]\n\n[1] 3 8\n\n\n\n# Acceder a un elemento específico (fila 1, columna 1)\nx[1, 1]\n\n[1] 2\n\n# Acceder a la primera fila\nx[1, ]\n\n[1] 2 3\n\n\n\n# Asignar nombres a las columnas\ncolnames(x) &lt;- c(\"col1\", \"col2\")\nx\n\n     col1 col2\n[1,]    2    3\n[2,]    7    8\n\n# Asignar nombres a las filas\nrownames(x) &lt;- c(\"row1\", \"row2\")\nx\n\n     col1 col2\nrow1    2    3\nrow2    7    8\n\n\n\n# Obtener nombres de filas\nrownames(x)\n\n[1] \"row1\" \"row2\"\n\n# Obtener nombres de columnas\ncolnames(x)\n\n[1] \"col1\" \"col2\"\n\n\n\n# Dimensiones de la matriz (filas, columnas)\ndim(x)\n\n[1] 2 2\n\n\n\n# Multiplicación elemento a elemento\nx * x\n\n     col1 col2\nrow1    4    9\nrow2   49   64\n\n# Producto matricial (por su transpuesta)\nx %*% t(x)\n\n     row1 row2\nrow1   13   38\nrow2   38  113\n\n\n\n# Añadir una columna con cbind()\nx &lt;- cbind(x, c(7, 3))\nx\n\n     col1 col2  \nrow1    2    3 7\nrow2    7    8 3\n\n# Añadir una fila con rbind()\nx &lt;- rbind(x, c(3, 7, 9))\nx\n\n     col1 col2  \nrow1    2    3 7\nrow2    7    8 3\n        3    7 9"
  },
  {
    "objectID": "clase_1.html#matrices-en-r",
    "href": "clase_1.html#matrices-en-r",
    "title": "CLASE 1",
    "section": "Matrices en R",
    "text": "Matrices en R\nLas matrices son estructuras bidimensionales que almacenan datos del mismo tipo (numéricos, lógicos, etc.). Son fundamentales para operaciones algebraicas y manipulación de datos estructurados.\n\n# Crear una matriz 2x2\nx &lt;- matrix(c(2, 7, 3, 8), nrow = 2, ncol = 2)\nx\n\n     [,1] [,2]\n[1,]    2    3\n[2,]    7    8\n\n\n\n# Acceder a la segunda columna\nx[, 2]\n\n[1] 3 8\n\n\n\n# Acceder a un elemento específico (fila 1, columna 1)\nx[1, 1]\n\n[1] 2\n\n# Acceder a la primera fila\nx[1, ]\n\n[1] 2 3\n\n\n\n# Asignar nombres a las columnas\ncolnames(x) &lt;- c(\"col1\", \"col2\")\nx\n\n     col1 col2\n[1,]    2    3\n[2,]    7    8\n\n# Asignar nombres a las filas\nrownames(x) &lt;- c(\"row1\", \"row2\")\nx\n\n     col1 col2\nrow1    2    3\nrow2    7    8\n\n\n\n# Obtener nombres de filas\nrownames(x)\n\n[1] \"row1\" \"row2\"\n\n# Obtener nombres de columnas\ncolnames(x)\n\n[1] \"col1\" \"col2\"\n\n\n\n# Dimensiones de la matriz (filas, columnas)\ndim(x)\n\n[1] 2 2\n\n\n\n# Multiplicación elemento a elemento\nx * x\n\n     col1 col2\nrow1    4    9\nrow2   49   64\n\n# Producto matricial (por su transpuesta)\nx %*% t(x)\n\n     row1 row2\nrow1   13   38\nrow2   38  113\n\n\n\n# Añadir una columna con cbind()\nx &lt;- cbind(x, c(7, 3))\nx\n\n     col1 col2  \nrow1    2    3 7\nrow2    7    8 3\n\n# Añadir una fila con rbind()\nx &lt;- rbind(x, c(3, 7, 9))\nx\n\n     col1 col2  \nrow1    2    3 7\nrow2    7    8 3\n        3    7 9"
  },
  {
    "objectID": "clase_1.html#cargar-y-guardar-datos-desde-diferentes-formatos",
    "href": "clase_1.html#cargar-y-guardar-datos-desde-diferentes-formatos",
    "title": "CLASE 1",
    "section": "Cargar y Guardar datos desde diferentes formatos",
    "text": "Cargar y Guardar datos desde diferentes formatos\nR permite importar bases de datos almacenadas en múltiples formatos mediante paquetes y funciones especializadas. A continuación se muestran los más comunes y los parámetros clave a tener en cuenta.\n\nFormatos y funciones principales\n\nExcel (.xlsx, .xls)**\n# cargar\nlibrary(readxl)\ndf_excel &lt;- read_excel(\"datos.xlsx\", sheet = \"Hoja1\")\n\n# guardar\nlibrary(writexl)\nwrite_xlsx(\n  df,\n  path = \"salida.xlsx\"\n)\n\n\n\nCSV (.csv)\n# cargar\ndf_csv &lt;- read.csv(\n  \"datos.csv\",\n  header = TRUE,    # Primera fila como nombres de columna\n  sep    = \",\",     # Delimitador de campos\n  dec    = \".\",     # Separador decimal\n  quote  = \"\\\"\"\n)\n\n# guardar\nwrite.csv(\n  df,\n  file = \"salida.csv\",\n  row.names = FALSE     # Evita guardar los nombres de fila\n)\n\n\nStata (.dta)\n# cargar\nlibrary(haven)\ndf_dta &lt;- read_dta(\"datos.dta\")"
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Instalación",
    "section": "",
    "text": "Abra un navegador y vaya a www.r-project.org.\nHaga clic en download R bajo “Getting Started”.\nSeleccione un espejo CRAN y haga clic en el enlace correspondiente.\nHaga clic en Download R for (Mac) OS X.\nDescargue el archivo .pkg de la versión más reciente (por ejemplo, R 4.1.1).\nAbra el archivo .pkg y siga las instrucciones del instalador.\nUna vez instalado R, descargue RStudio desde www.rstudio.com &gt; Download Free Desktop IDE &gt; Desktop Open Source License &gt; descargue la versión .dmg para Mac y arrástrela a la carpeta de Aplicaciones.\nDescargar e instalar Rtools https://cran.r-project.org/bin/windows/Rtools/rtools45/rtools.html\n\n\n\n\n\nAbra un navegador y vaya a www.r-project.org.\nHaga clic en download R bajo “Getting Started”.\nSeleccione un espejo CRAN y haga clic en el enlace correspondiente.\nHaga clic en Download R for Windows.\nDescargue el instalador .exe de la versión más reciente (por ejemplo, R 4.1.1).\nAbra el archivo .exe y siga las instrucciones del instalador.\nUna vez instalado R, descargue RStudio desde www.rstudio.com &gt; Download RStudio &gt; Desktop Open Source License &gt; descargue la versión .exe para Windows y ejecútela.\nDescargar e instalar Rtools https://cran.r-project.org/bin/windows/Rtools/rtools45/rtools.html"
  },
  {
    "objectID": "install.html#instalación-de-r-y-rstudio",
    "href": "install.html#instalación-de-r-y-rstudio",
    "title": "Instalación",
    "section": "",
    "text": "Abra un navegador y vaya a www.r-project.org.\nHaga clic en download R bajo “Getting Started”.\nSeleccione un espejo CRAN y haga clic en el enlace correspondiente.\nHaga clic en Download R for (Mac) OS X.\nDescargue el archivo .pkg de la versión más reciente (por ejemplo, R 4.1.1).\nAbra el archivo .pkg y siga las instrucciones del instalador.\nUna vez instalado R, descargue RStudio desde www.rstudio.com &gt; Download Free Desktop IDE &gt; Desktop Open Source License &gt; descargue la versión .dmg para Mac y arrástrela a la carpeta de Aplicaciones.\nDescargar e instalar Rtools https://cran.r-project.org/bin/windows/Rtools/rtools45/rtools.html\n\n\n\n\n\nAbra un navegador y vaya a www.r-project.org.\nHaga clic en download R bajo “Getting Started”.\nSeleccione un espejo CRAN y haga clic en el enlace correspondiente.\nHaga clic en Download R for Windows.\nDescargue el instalador .exe de la versión más reciente (por ejemplo, R 4.1.1).\nAbra el archivo .exe y siga las instrucciones del instalador.\nUna vez instalado R, descargue RStudio desde www.rstudio.com &gt; Download RStudio &gt; Desktop Open Source License &gt; descargue la versión .exe para Windows y ejecútela.\nDescargar e instalar Rtools https://cran.r-project.org/bin/windows/Rtools/rtools45/rtools.html"
  },
  {
    "objectID": "ejercicios.html",
    "href": "ejercicios.html",
    "title": "Ejercicios",
    "section": "",
    "text": "Reiniciar R (Session → Restart R).\nCrear un nuevo script en su carpeta de trabajo nombrado ejercicio_1.R y realizar los siguientes procedimientos:\n\nCrear un objeto llamado var definido como el resultado de la suma: 3 + 9.\nCrear un vector vec que contenga los números 1, 3, 5.\nCrear tres vectores (vec1, vec2, vec3) que sean transformaciones del vector anterior.\nCrear tres vectores con la misma cantidad de elementos que vec, pero con variables de texto (vec4, vec5, vec6).\nCrear un data frame data como combinación de todos los vectores creados previamente.\nCrear una matriz diagonal de 2×2 que contenga 1 en la diagonal y 0 en el resto, y nombrar sus filas y columnas como sec1, sec2.\nMultiplicar la matriz diagonal por un vector columna de 1.\nExportar los resultados en formato CSV."
  },
  {
    "objectID": "ejercicios.html#ejercicios-1",
    "href": "ejercicios.html#ejercicios-1",
    "title": "Ejercicios",
    "section": "",
    "text": "Reiniciar R (Session → Restart R).\nCrear un nuevo script en su carpeta de trabajo nombrado ejercicio_1.R y realizar los siguientes procedimientos:\n\nCrear un objeto llamado var definido como el resultado de la suma: 3 + 9.\nCrear un vector vec que contenga los números 1, 3, 5.\nCrear tres vectores (vec1, vec2, vec3) que sean transformaciones del vector anterior.\nCrear tres vectores con la misma cantidad de elementos que vec, pero con variables de texto (vec4, vec5, vec6).\nCrear un data frame data como combinación de todos los vectores creados previamente.\nCrear una matriz diagonal de 2×2 que contenga 1 en la diagonal y 0 en el resto, y nombrar sus filas y columnas como sec1, sec2.\nMultiplicar la matriz diagonal por un vector columna de 1.\nExportar los resultados en formato CSV."
  },
  {
    "objectID": "clase_2.html",
    "href": "clase_2.html",
    "title": "Clase 2",
    "section": "",
    "text": "A lo largo de esta clase, trabajaremos con el paquete Tidyverse.\nEste conjunto de paquetes comparte una misma lógica de diseño y funciona en armonía para facilitar el análisis de datos.\nEntre sus componentes, usaremos principalmente:\n\ndplyr: para manipulación de datos (filtrado, selección, agrupación y mutación).\ntidyr: para transformar y reordenar datos (pivotar, separar y unir columnas).\n\nPara instalar y cargar Tidyverse, ejecuta:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Crear datos de ejemplo para 'aranceles'\naranceles &lt;- tibble(\n  hs6 = c(rep(10121, 12)),\n  expo = c(\"ARG\",\"BRA\",\"CAN\",\"CHN\",\"EUN\",\"IND\",\"MEX\",\"PRY\",\"ROW\",\"USA\",\"RUS\",\"JPN\"),\n  impo = c(\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\"),\n  t0   = sample(0:5, 12, replace = TRUE)\n)\n\n# Ver tabla de ejemplo\nglimpse(aranceles)\n\nRows: 12\nColumns: 4\n$ hs6  &lt;dbl&gt; 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10…\n$ expo &lt;chr&gt; \"ARG\", \"BRA\", \"CAN\", \"CHN\", \"EUN\", \"IND\", \"MEX\", \"PRY\", \"ROW\", \"U…\n$ impo &lt;chr&gt; \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"P…\n$ t0   &lt;int&gt; 0, 2, 3, 0, 4, 0, 0, 5, 5, 0, 4, 4\n\n## Paquete dplyr\n\nEl operador principal es %&gt;% (pipe). Este toma el conjunto de datos a su izquierda y lo pasa implícitamente a la función de la derecha.\n\n### Filtrar datos con `filter()`\ndata &lt;- aranceles %&gt;%\n  filter(impo == \"PRY\" & expo == \"ARG\")\n\n# Mostrar las primeras 10 filas y 4 columnas\nhead(data, 10)[, 1:4]\n\n# A tibble: 1 × 4\n    hs6 expo  impo     t0\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;\n1 10121 ARG   PRY       0\n\n\nRenombrar columnas con rename()\n\n# Renombrar la columna 'impo' a 'importador'\ndata &lt;- aranceles %&gt;%\n  rename(importador = impo)\n\n# Mostrar las primeras 10 filas y 4 columnas\nhead(data, 10)[, 1:4]\n\n# A tibble: 10 × 4\n     hs6 expo  importador    t0\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;      &lt;int&gt;\n 1 10121 ARG   PRY            0\n 2 10121 BRA   PRY            2\n 3 10121 CAN   PRY            3\n 4 10121 CHN   PRY            0\n 5 10121 EUN   PRY            4\n 6 10121 IND   PRY            0\n 7 10121 MEX   PRY            0\n 8 10121 PRY   PRY            5\n 9 10121 ROW   PRY            5\n10 10121 USA   PRY            0\n\n\nCrear nuevas columnas con mutate()\nmutate() permite agregar una o varias columnas al data frame, basadas en operaciones sobre las variables existentes. Si el nombre coincide con una columna ya existente, su contenido se sobrescribe.\n\n# Agregar columna 'maximo' que toma el valor máximo de t0\ndata &lt;- aranceles %&gt;%  mutate(\n    maximo    = max(t0),            # Valor máximo\n    minimo    = min(t0),            # Valor mínimo\n    media     = mean(t0),           # Promedio\n    suma      = sum(t0),            # Suma total\n    rango     = max(t0) - min(t0),  # Diferencia máxima-mínima\n    doble_t0  = t0 * 2              # Doble de cada valor de t0\n  )  \n\n# Mostrar las primeras 10 filas y 5 columnas\nhead(data, 10)[, 1:5]\n\n# A tibble: 10 × 5\n     hs6 expo  impo     t0 maximo\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;  &lt;int&gt;\n 1 10121 ARG   PRY       0      5\n 2 10121 BRA   PRY       2      5\n 3 10121 CAN   PRY       3      5\n 4 10121 CHN   PRY       0      5\n 5 10121 EUN   PRY       4      5\n 6 10121 IND   PRY       0      5\n 7 10121 MEX   PRY       0      5\n 8 10121 PRY   PRY       5      5\n 9 10121 ROW   PRY       5      5\n10 10121 USA   PRY       0      5\n\n\n\n\nsummarise() (o summarize()) permite calcular resúmenes estadísticos de una o más variables. Devuelve un data frame más compacto, útil para obtener valores agregados como el promedio, suma, máximo o mínimo. Puede aplicarse de forma global o en combinación con group_by() para obtener resúmenes por grupo.\n_summarise() calcula estadísticas agregadas sobre todo el data frame o por grupos (cuando se usa junto a group_by()). Si se define el mismo nombre de columna existente, el resultado sobrescribe dicha columna.\n\n# Resumen global: máximos, mínimos y promedio de t0\ndata_resumen &lt;- aranceles %&gt;%\n  summarise(\n    maximo_global = max(t0),\n    minimo_global = min(t0),\n    media_global  = mean(t0),\n    suma_total    = sum(t0)\n  )\n\ndata_resumen\n\n# A tibble: 1 × 4\n  maximo_global minimo_global media_global suma_total\n          &lt;int&gt;         &lt;int&gt;        &lt;dbl&gt;      &lt;int&gt;\n1             5             0         2.25         27\n\n\n\n\n\nLa función case_when() permite definir una nueva columna cuyos valores dependen de condiciones lógicas. Es útil para asignar etiquetas o transformar valores según múltiples criterios.\n\n# Asignar valores según el país exportador \ndata &lt;- aranceles %&gt;%   mutate(trade = case_when(    \n  expo == \"ARG\" ~ 100,     \n  expo == \"BRA\" ~ 200,     \n  expo == \"CAN\" ~ 300,\n  TRUE ~ 500))  \n# Mostrar las primeras 10 filas y 5 columnas \nhead(data, 10)[, 1:5]\n\n# A tibble: 10 × 5\n     hs6 expo  impo     t0 trade\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt;\n 1 10121 ARG   PRY       0   100\n 2 10121 BRA   PRY       2   200\n 3 10121 CAN   PRY       3   300\n 4 10121 CHN   PRY       0   500\n 5 10121 EUN   PRY       4   500\n 6 10121 IND   PRY       0   500\n 7 10121 MEX   PRY       0   500\n 8 10121 PRY   PRY       5   500\n 9 10121 ROW   PRY       5   500\n10 10121 USA   PRY       0   500\n\n\n\n\n\nLa función if_else() es útil cuando se desea aplicar una condición binaria (verdadero o falso) para generar una nueva variable.\n\n# Crear una columna que indique si el arancel es cero o no \ndata &lt;- data %&gt;%   mutate(arancel_cero = if_else(t0 == 0, \"Sí\", \"No\"))  # Mostrar las primeras 10 filas y nueva columna \nhead(data, 10)[, c(\"t0\", \"arancel_cero\")] \n\n# A tibble: 10 × 2\n      t0 arancel_cero\n   &lt;int&gt; &lt;chr&gt;       \n 1     0 Sí          \n 2     2 No          \n 3     3 No          \n 4     0 Sí          \n 5     4 No          \n 6     0 Sí          \n 7     0 Sí          \n 8     5 No          \n 9     5 No          \n10     0 Sí          \n\n\n\n\n\nLa función select() permite elegir un subconjunto de columnas de un data frame. Es útil para mantener solo las variables relevantes y descartar las innecesarias.\n\n# Seleccionar solo las columnas 'expo' e 'impo' data &lt;- aranceles %&gt;%   dplyr::select(expo, impo)  # Mostrar las primeras 10 filas head(data, 10)\n\n\n\n\nLa función arrange() ordena los datos según los valores de una o más columnas. Por defecto, el orden es ascendente. Se puede usar desc() para orden descendente.\n\n# Ordenar las filas por la columna 'impo' \ndata &lt;- aranceles %&gt;%   arrange(impo)  # Mostrar las primeras 10 filas y 2 columnas \nhead(data, 10)[, 1:2]\n\n# A tibble: 10 × 2\n     hs6 expo \n   &lt;dbl&gt; &lt;chr&gt;\n 1 10121 ARG  \n 2 10121 BRA  \n 3 10121 CAN  \n 4 10121 CHN  \n 5 10121 EUN  \n 6 10121 IND  \n 7 10121 MEX  \n 8 10121 PRY  \n 9 10121 ROW  \n10 10121 USA  \n\n\n\n\n\nLa función group_by() permite agrupar un data frame por una o más variables. Suele utilizarse en combinación con summarise() o mutate() para aplicar operaciones dentro de cada grupo.\n\n# Agrupar por país exportador y ordenar por código hs6\ndata &lt;- aranceles %&gt;%\n  group_by(hs6) %&gt;%\n  arrange(expo)\n\n# Mostrar las primeras 10 filas\nhead(data, 10)[, 1:2]\n\n# A tibble: 10 × 2\n# Groups:   hs6 [1]\n     hs6 expo \n   &lt;dbl&gt; &lt;chr&gt;\n 1 10121 ARG  \n 2 10121 BRA  \n 3 10121 CAN  \n 4 10121 CHN  \n 5 10121 EUN  \n 6 10121 IND  \n 7 10121 JPN  \n 8 10121 MEX  \n 9 10121 PRY  \n10 10121 ROW  \n\n\n\n\n\nPodemos combinar group_by(), mutate() y summarise() para realizar transformaciones y resúmenes dentro de grupos definidos por una o más variables.\n\n\n\n# Calcular el promedio por grupo y etiquetar si el valor está por encima del promedio de su grupo \nresultado &lt;- aranceles %&gt;%   group_by(expo) %&gt;%   mutate(media_por_expo = mean(t0)) %&gt;%   mutate(sobre_promedio = if_else(t0 &gt; media_por_expo, \"Sí\", \"No\"))  %&gt;% \n  ungroup() \n \n# Mostrar algunas filas \nhead(resultado, 10)\n\n# A tibble: 10 × 6\n     hs6 expo  impo     t0 media_por_expo sobre_promedio\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;          &lt;dbl&gt; &lt;chr&gt;         \n 1 10121 ARG   PRY       0              0 No            \n 2 10121 BRA   PRY       2              2 No            \n 3 10121 CAN   PRY       3              3 No            \n 4 10121 CHN   PRY       0              0 No            \n 5 10121 EUN   PRY       4              4 No            \n 6 10121 IND   PRY       0              0 No            \n 7 10121 MEX   PRY       0              0 No            \n 8 10121 PRY   PRY       5              5 No            \n 9 10121 ROW   PRY       5              5 No            \n10 10121 USA   PRY       0              0 No            \n\n\n\n\n\n\n# Resumen por grupo exportador resumen_\nexpo &lt;- aranceles %&gt;%   group_by(expo) %&gt;%   \n  summarise(     promedio = mean(t0),     \n                 minimo   = min(t0),    \n                 maximo   = max(t0),     \n                 n_obs    = n()   )  %&gt;% \n  ungroup()"
  },
  {
    "objectID": "clase_2.html#paquete-tidyverse",
    "href": "clase_2.html#paquete-tidyverse",
    "title": "Clase 2",
    "section": "",
    "text": "A lo largo de esta clase, trabajaremos con el paquete Tidyverse.\nEste conjunto de paquetes comparte una misma lógica de diseño y funciona en armonía para facilitar el análisis de datos.\nEntre sus componentes, usaremos principalmente:\n\ndplyr: para manipulación de datos (filtrado, selección, agrupación y mutación).\ntidyr: para transformar y reordenar datos (pivotar, separar y unir columnas).\n\nPara instalar y cargar Tidyverse, ejecuta:\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n# Crear datos de ejemplo para 'aranceles'\naranceles &lt;- tibble(\n  hs6 = c(rep(10121, 12)),\n  expo = c(\"ARG\",\"BRA\",\"CAN\",\"CHN\",\"EUN\",\"IND\",\"MEX\",\"PRY\",\"ROW\",\"USA\",\"RUS\",\"JPN\"),\n  impo = c(\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\",\"PRY\"),\n  t0   = sample(0:5, 12, replace = TRUE)\n)\n\n# Ver tabla de ejemplo\nglimpse(aranceles)\n\nRows: 12\nColumns: 4\n$ hs6  &lt;dbl&gt; 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10121, 10…\n$ expo &lt;chr&gt; \"ARG\", \"BRA\", \"CAN\", \"CHN\", \"EUN\", \"IND\", \"MEX\", \"PRY\", \"ROW\", \"U…\n$ impo &lt;chr&gt; \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"PRY\", \"P…\n$ t0   &lt;int&gt; 0, 2, 3, 0, 4, 0, 0, 5, 5, 0, 4, 4\n\n## Paquete dplyr\n\nEl operador principal es %&gt;% (pipe). Este toma el conjunto de datos a su izquierda y lo pasa implícitamente a la función de la derecha.\n\n### Filtrar datos con `filter()`\ndata &lt;- aranceles %&gt;%\n  filter(impo == \"PRY\" & expo == \"ARG\")\n\n# Mostrar las primeras 10 filas y 4 columnas\nhead(data, 10)[, 1:4]\n\n# A tibble: 1 × 4\n    hs6 expo  impo     t0\n  &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;\n1 10121 ARG   PRY       0\n\n\nRenombrar columnas con rename()\n\n# Renombrar la columna 'impo' a 'importador'\ndata &lt;- aranceles %&gt;%\n  rename(importador = impo)\n\n# Mostrar las primeras 10 filas y 4 columnas\nhead(data, 10)[, 1:4]\n\n# A tibble: 10 × 4\n     hs6 expo  importador    t0\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt;      &lt;int&gt;\n 1 10121 ARG   PRY            0\n 2 10121 BRA   PRY            2\n 3 10121 CAN   PRY            3\n 4 10121 CHN   PRY            0\n 5 10121 EUN   PRY            4\n 6 10121 IND   PRY            0\n 7 10121 MEX   PRY            0\n 8 10121 PRY   PRY            5\n 9 10121 ROW   PRY            5\n10 10121 USA   PRY            0\n\n\nCrear nuevas columnas con mutate()\nmutate() permite agregar una o varias columnas al data frame, basadas en operaciones sobre las variables existentes. Si el nombre coincide con una columna ya existente, su contenido se sobrescribe.\n\n# Agregar columna 'maximo' que toma el valor máximo de t0\ndata &lt;- aranceles %&gt;%  mutate(\n    maximo    = max(t0),            # Valor máximo\n    minimo    = min(t0),            # Valor mínimo\n    media     = mean(t0),           # Promedio\n    suma      = sum(t0),            # Suma total\n    rango     = max(t0) - min(t0),  # Diferencia máxima-mínima\n    doble_t0  = t0 * 2              # Doble de cada valor de t0\n  )  \n\n# Mostrar las primeras 10 filas y 5 columnas\nhead(data, 10)[, 1:5]\n\n# A tibble: 10 × 5\n     hs6 expo  impo     t0 maximo\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;  &lt;int&gt;\n 1 10121 ARG   PRY       0      5\n 2 10121 BRA   PRY       2      5\n 3 10121 CAN   PRY       3      5\n 4 10121 CHN   PRY       0      5\n 5 10121 EUN   PRY       4      5\n 6 10121 IND   PRY       0      5\n 7 10121 MEX   PRY       0      5\n 8 10121 PRY   PRY       5      5\n 9 10121 ROW   PRY       5      5\n10 10121 USA   PRY       0      5\n\n\n\n\nsummarise() (o summarize()) permite calcular resúmenes estadísticos de una o más variables. Devuelve un data frame más compacto, útil para obtener valores agregados como el promedio, suma, máximo o mínimo. Puede aplicarse de forma global o en combinación con group_by() para obtener resúmenes por grupo.\n_summarise() calcula estadísticas agregadas sobre todo el data frame o por grupos (cuando se usa junto a group_by()). Si se define el mismo nombre de columna existente, el resultado sobrescribe dicha columna.\n\n# Resumen global: máximos, mínimos y promedio de t0\ndata_resumen &lt;- aranceles %&gt;%\n  summarise(\n    maximo_global = max(t0),\n    minimo_global = min(t0),\n    media_global  = mean(t0),\n    suma_total    = sum(t0)\n  )\n\ndata_resumen\n\n# A tibble: 1 × 4\n  maximo_global minimo_global media_global suma_total\n          &lt;int&gt;         &lt;int&gt;        &lt;dbl&gt;      &lt;int&gt;\n1             5             0         2.25         27\n\n\n\n\n\nLa función case_when() permite definir una nueva columna cuyos valores dependen de condiciones lógicas. Es útil para asignar etiquetas o transformar valores según múltiples criterios.\n\n# Asignar valores según el país exportador \ndata &lt;- aranceles %&gt;%   mutate(trade = case_when(    \n  expo == \"ARG\" ~ 100,     \n  expo == \"BRA\" ~ 200,     \n  expo == \"CAN\" ~ 300,\n  TRUE ~ 500))  \n# Mostrar las primeras 10 filas y 5 columnas \nhead(data, 10)[, 1:5]\n\n# A tibble: 10 × 5\n     hs6 expo  impo     t0 trade\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt; &lt;dbl&gt;\n 1 10121 ARG   PRY       0   100\n 2 10121 BRA   PRY       2   200\n 3 10121 CAN   PRY       3   300\n 4 10121 CHN   PRY       0   500\n 5 10121 EUN   PRY       4   500\n 6 10121 IND   PRY       0   500\n 7 10121 MEX   PRY       0   500\n 8 10121 PRY   PRY       5   500\n 9 10121 ROW   PRY       5   500\n10 10121 USA   PRY       0   500\n\n\n\n\n\nLa función if_else() es útil cuando se desea aplicar una condición binaria (verdadero o falso) para generar una nueva variable.\n\n# Crear una columna que indique si el arancel es cero o no \ndata &lt;- data %&gt;%   mutate(arancel_cero = if_else(t0 == 0, \"Sí\", \"No\"))  # Mostrar las primeras 10 filas y nueva columna \nhead(data, 10)[, c(\"t0\", \"arancel_cero\")] \n\n# A tibble: 10 × 2\n      t0 arancel_cero\n   &lt;int&gt; &lt;chr&gt;       \n 1     0 Sí          \n 2     2 No          \n 3     3 No          \n 4     0 Sí          \n 5     4 No          \n 6     0 Sí          \n 7     0 Sí          \n 8     5 No          \n 9     5 No          \n10     0 Sí          \n\n\n\n\n\nLa función select() permite elegir un subconjunto de columnas de un data frame. Es útil para mantener solo las variables relevantes y descartar las innecesarias.\n\n# Seleccionar solo las columnas 'expo' e 'impo' data &lt;- aranceles %&gt;%   dplyr::select(expo, impo)  # Mostrar las primeras 10 filas head(data, 10)\n\n\n\n\nLa función arrange() ordena los datos según los valores de una o más columnas. Por defecto, el orden es ascendente. Se puede usar desc() para orden descendente.\n\n# Ordenar las filas por la columna 'impo' \ndata &lt;- aranceles %&gt;%   arrange(impo)  # Mostrar las primeras 10 filas y 2 columnas \nhead(data, 10)[, 1:2]\n\n# A tibble: 10 × 2\n     hs6 expo \n   &lt;dbl&gt; &lt;chr&gt;\n 1 10121 ARG  \n 2 10121 BRA  \n 3 10121 CAN  \n 4 10121 CHN  \n 5 10121 EUN  \n 6 10121 IND  \n 7 10121 MEX  \n 8 10121 PRY  \n 9 10121 ROW  \n10 10121 USA  \n\n\n\n\n\nLa función group_by() permite agrupar un data frame por una o más variables. Suele utilizarse en combinación con summarise() o mutate() para aplicar operaciones dentro de cada grupo.\n\n# Agrupar por país exportador y ordenar por código hs6\ndata &lt;- aranceles %&gt;%\n  group_by(hs6) %&gt;%\n  arrange(expo)\n\n# Mostrar las primeras 10 filas\nhead(data, 10)[, 1:2]\n\n# A tibble: 10 × 2\n# Groups:   hs6 [1]\n     hs6 expo \n   &lt;dbl&gt; &lt;chr&gt;\n 1 10121 ARG  \n 2 10121 BRA  \n 3 10121 CAN  \n 4 10121 CHN  \n 5 10121 EUN  \n 6 10121 IND  \n 7 10121 JPN  \n 8 10121 MEX  \n 9 10121 PRY  \n10 10121 ROW  \n\n\n\n\n\nPodemos combinar group_by(), mutate() y summarise() para realizar transformaciones y resúmenes dentro de grupos definidos por una o más variables.\n\n\n\n# Calcular el promedio por grupo y etiquetar si el valor está por encima del promedio de su grupo \nresultado &lt;- aranceles %&gt;%   group_by(expo) %&gt;%   mutate(media_por_expo = mean(t0)) %&gt;%   mutate(sobre_promedio = if_else(t0 &gt; media_por_expo, \"Sí\", \"No\"))  %&gt;% \n  ungroup() \n \n# Mostrar algunas filas \nhead(resultado, 10)\n\n# A tibble: 10 × 6\n     hs6 expo  impo     t0 media_por_expo sobre_promedio\n   &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;int&gt;          &lt;dbl&gt; &lt;chr&gt;         \n 1 10121 ARG   PRY       0              0 No            \n 2 10121 BRA   PRY       2              2 No            \n 3 10121 CAN   PRY       3              3 No            \n 4 10121 CHN   PRY       0              0 No            \n 5 10121 EUN   PRY       4              4 No            \n 6 10121 IND   PRY       0              0 No            \n 7 10121 MEX   PRY       0              0 No            \n 8 10121 PRY   PRY       5              5 No            \n 9 10121 ROW   PRY       5              5 No            \n10 10121 USA   PRY       0              0 No            \n\n\n\n\n\n\n# Resumen por grupo exportador resumen_\nexpo &lt;- aranceles %&gt;%   group_by(expo) %&gt;%   \n  summarise(     promedio = mean(t0),     \n                 minimo   = min(t0),    \n                 maximo   = max(t0),     \n                 n_obs    = n()   )  %&gt;% \n  ungroup()"
  },
  {
    "objectID": "clase_1.html#r-vs-stata",
    "href": "clase_1.html#r-vs-stata",
    "title": "CLASE 1",
    "section": "",
    "text": "R presenta una serie de ventajas importantes frente a Stata, especialmente para quienes buscan una herramienta potente, flexible y accesible para el análisis de datos:\n\nEs gratuito: R es completamente libre y de código abierto. A diferencia de Stata, no requiere licencias de pago, lo que lo hace ideal tanto para instituciones públicas como para estudiantes y profesionales independientes.\nAlta potencia computacional: R permite realizar análisis estadísticos complejos, modelado avanzado y procesamiento masivo de datos, gracias a su arquitectura extensible y a la amplia variedad de paquetes disponibles.\nVelocidad: Con el uso adecuado de paquetes optimizados (como data.table o dplyr), R puede ser muy eficiente en el manejo de grandes volúmenes de datos.\nCompatibilidad con otros lenguajes: R se integra fácilmente con otros lenguajes como Python, C++, SQL y Julia, lo que permite construir flujos de trabajo más completos y personalizados.\nManejo de microdatos en memoria virtual: A diferencia de Stata, R permite trabajar con múltiples conjuntos de microdatos de forma simultánea sin necesidad de cargarlos físicamente al entorno, lo cual mejora la eficiencia y facilita comparaciones entre bases.\nAplicaciones avanzadas: R incluye herramientas para aprendizaje automático (machine learning), redes neuronales profundas (deep neural networks) y otras técnicas de inteligencia artificial, que amplían significativamente sus posibilidades de aplicación en áreas emergentes."
  },
  {
    "objectID": "ejercicios.html#ejercicios-2",
    "href": "ejercicios.html#ejercicios-2",
    "title": "Ejercicios",
    "section": "Ejercicios # 2",
    "text": "Ejercicios # 2\nA continuación, se presentan 10 ejercicios prácticos que aplican lo aprendido con el paquete dplyr, utilizando el dataset mtcars, disponible por defecto en R. Asegúrate de cargar el paquete dplyr antes de comenzar:\n\nlibrary(dplyr) \n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\ndata &lt;- mtcars[1:5,1:3]\n\n\nFiltrar datos: Filtra los autos que tengan más de 6 cilindros (cyl &gt; 6).\nSeleccionar columnas: Selecciona las columnas mpg, cyl y gear.\nOrdenar datos: Ordena el dataset por rendimiento (mpg) de forma descendente.\nRenombrar columnas: Cambia el nombre de la columna mpg por rendimiento.\nAgregar una nueva columna: Crea una columna llamada potencia_peso que sea el cociente entre hp y wt.\nCrear columna condicional: Crea una variable alto_consumo que indique “Sí” si mpg es menor a 20, y “No” en caso contrario.\nAsignar valores con case_when(): Clasifica los autos en categorías según cyl: “bajo” (4), “medio” (6), y “alto” (8 o más).\nAgrupar y calcular promedio: Calcula el promedio de mpg para cada cantidad de cilindros (cyl).\nAgrupar y clasificar: Dentro de cada grupo de gear, crea una columna que indique si hp está por encima del promedio de su grupo.\nPromedio por combinación de variables: Calcula el promedio de mpg agrupando por cyl y gear.\nClasificación múltiple con case_when(): Crea una variable consumo con tres niveles: “alto” (mpg &gt; 25), “medio” (entre 20 y 25), y “bajo” (&lt; 20).\nCrear ranking: Dentro de cada grupo definido por cyl, crea una columna que indique el ranking del auto según su potencia (hp).\nConteo de autos por grupo: Cuenta cuántos autos hay por combinación de am (tipo de transmisión) y gear.\nExportar resultados: Guarda el nuevo dataset en un archivo CSV llamado mtcars_procesado.csv."
  },
  {
    "objectID": "clase_3.html#introducción",
    "href": "clase_3.html#introducción",
    "title": "Clase 3",
    "section": "Introducción",
    "text": "Introducción\n\nEn esta clase vamos a consolidar los conocimientos adquiridos con dplyr y comenzar a trabajar con el paquete ggplot2 para realizar visualizaciones. Usaremos la base de datos mtcars, que está disponible por defecto en R. Comenzaremos construyendo tablas sumarias relevantes que permitan extraer información clave.\nAsegurate de cargar los paquetes necesarios:\n\nlibrary(dplyr) \n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(ggplot2) \ndata &lt;- mtcars"
  },
  {
    "objectID": "clase_3.html#tablas-sumarias-relevantes",
    "href": "clase_3.html#tablas-sumarias-relevantes",
    "title": "Clase 3",
    "section": "Tablas sumarias relevantes",
    "text": "Tablas sumarias relevantes\nA continuación se presentan 5 tablas que resumen distintos aspectos de mtcars.\n\n1. Promedio de rendimiento (mpg) por número de cilindros\n\ndata %&gt;%   group_by(cyl) %&gt;%   summarise(promedio_mpg = mean(mpg)) %&gt;%   ungroup()\n\n# A tibble: 3 × 2\n    cyl promedio_mpg\n  &lt;dbl&gt;        &lt;dbl&gt;\n1     4         26.7\n2     6         19.7\n3     8         15.1\n\n\n\n\n2. Conteo de autos según número de marchas (gear) y tipo de transmisión (am)\n\ndata %&gt;%   count(gear, am)\n\n  gear am  n\n1    3  0 15\n2    4  0  4\n3    4  1  8\n4    5  1  5\n\n\n\n\n3. Estadísticas descriptivas de potencia (hp) por cilindros\n\ndata %&gt;%   group_by(cyl) %&gt;%   summarise(     promedio_hp = mean(hp),     max_hp = max(hp),     min_hp = min(hp),     sd_hp = sd(hp)   ) %&gt;%   ungroup()\n\n# A tibble: 3 × 5\n    cyl promedio_hp max_hp min_hp sd_hp\n  &lt;dbl&gt;       &lt;dbl&gt;  &lt;dbl&gt;  &lt;dbl&gt; &lt;dbl&gt;\n1     4        82.6    113     52  20.9\n2     6       122.     175    105  24.3\n3     8       209.     335    150  51.0\n\n\n\n\n4. Relación promedio entre peso (wt) y cilindrada (disp) por grupo de cilindros\n\ndata %&gt;%   group_by(cyl) %&gt;%   summarise(peso_disp = mean(wt / disp)) %&gt;%   ungroup()\n\n# A tibble: 3 × 2\n    cyl peso_disp\n  &lt;dbl&gt;     &lt;dbl&gt;\n1     4    0.0220\n2     6    0.0175\n3     8    0.0115\n\n\n\n\n5. Ranking de autos por eficiencia (mpg), mostrando los 5 primeros\n\ndata %&gt;%   arrange(desc(mpg)) %&gt;%   select(mpg, cyl, hp, wt) %&gt;%   head(5)\n\n                mpg cyl  hp    wt\nToyota Corolla 33.9   4  65 1.835\nFiat 128       32.4   4  66 2.200\nHonda Civic    30.4   4  52 1.615\nLotus Europa   30.4   4 113 1.513\nFiat X1-9      27.3   4  66 1.935\n\n\nA continuación, comenzaremos a crear gráficos para visualizar estas relaciones."
  },
  {
    "objectID": "clase_3.html#introducción-a-ggplot2",
    "href": "clase_3.html#introducción-a-ggplot2",
    "title": "Clase 3",
    "section": "Introducción a ggplot2",
    "text": "Introducción a ggplot2\nEl paquete ggplot2 nos permite crear visualizaciones complejas de forma estructurada y coherente. Se basa en la gramática de los gráficos: cada gráfico se construye en capas, comenzando por los datos y los ejes, luego se agregan geometrías (barras, puntos, líneas, etc.), escalas, etiquetas y temas.\nLa estructura básica de un gráfico en ggplot2 es:\nggplot(data, aes(x = variable_x, y = variable_y)) + geom_tipo()\nDonde:\n\ndata es el dataset.\naes() define el mapeo estético (ejes, colores, tamaños).\ngeom_tipo() especifica el tipo de gráfico (por ejemplo, geom_point() para dispersión, geom_bar() para barras, etc)."
  },
  {
    "objectID": "clase_3.html#visualizaciones-con-ggplot2",
    "href": "clase_3.html#visualizaciones-con-ggplot2",
    "title": "Clase 3",
    "section": "Visualizaciones con ggplot2",
    "text": "Visualizaciones con ggplot2\n\n1. Diagrama de dispersión: Peso vs Rendimiento\n\nggplot(data, aes(x = wt, y = mpg)) +   geom_point() +   labs(title = \"Peso vs Rendimiento\", x = \"Peso (wt)\", y = \"Millas por galón (mpg)\") +   theme_minimal()\n\n\n\n\n\n\n\n\n\n\n2. Boxplot de rendimiento por cantidad de cilindros\n\nggplot(data, aes(x = factor(cyl), y = mpg)) +   geom_boxplot() +   labs(title = \"Distribución del rendimiento por cilindros\", x = \"Cilindros\", y = \"Millas por galón\") +   theme_light()\n\n\n\n\n\n\n\n\n\n\n3. Histograma de potencia (hp)\n\nggplot(data, aes(x = hp)) +   geom_histogram(bins = 10, fill = \"steelblue\", color = \"white\") +   labs(title = \"Distribución de Potencia\", x = \"HP\", y = \"Frecuencia\") +   theme_minimal()\n\n\n\n\n\n\n\n\n\n\n4. Gráfico de barras del promedio de mpg por cilindros\n\ndata %&gt;%   group_by(cyl) %&gt;%   summarise(prom_mpg = mean(mpg)) %&gt;%   ungroup() %&gt;%   ggplot(aes(x = factor(cyl), y = prom_mpg)) +   geom_col(fill = \"darkgreen\") +   labs(title = \"Promedio de MPG por Cilindros\", x = \"Cilindros\", y = \"MPG Promedio\") +   theme_minimal()\n\n\n\n\n\n\n\n\n\n\n5. Facetas: Rendimiento vs Peso según número de marchas\n\nggplot(data, aes(x = wt, y = mpg)) +   geom_point() +   facet_wrap(~ gear) +   labs(title = \"Relación Peso y MPG según número de marchas\", x = \"Peso\", y = \"MPG\") +   theme_bw()\n\n\n\n\n\n\n\n\n\n\n6. Gráfico de líneas: Evolución simulada del rendimiento\nAunque el dataset mtcars no contiene una variable temporal, podemos simular un gráfico de líneas usando el índice de fila como un pseudo-tiempo para ver cómo varía mpg.\n\ndata %&gt;%   mutate(id = row_number()) %&gt;%   ggplot(aes(x = id, y = mpg)) +   geom_line(color = \"blue\") +   labs(title = \"Evolución simulada del rendimiento\", x = \"Índice del auto\", y = \"Millas por galón (mpg)\") +   theme_minimal()"
  },
  {
    "objectID": "clase_3.html#introducción-a-estructuras-de-control-condicionales-y-bucles",
    "href": "clase_3.html#introducción-a-estructuras-de-control-condicionales-y-bucles",
    "title": "Clase 3",
    "section": "Introducción a estructuras de control (condicionales y bucles)",
    "text": "Introducción a estructuras de control (condicionales y bucles)\nEn R, es posible automatizar tareas y tomar decisiones mediante estructuras de control. Las principales son:\n\nif / else\nPermite evaluar condiciones lógicas.\n\nx &lt;- 5\nif (x &gt; 0) {\n  print(\"x es positivo\")\n} else {\n  print(\"x no es positivo\")\n}\n\n[1] \"x es positivo\"\n\n\n\n\nfor\nItera sobre elementos de un vector o secuencia.\n\nfor (i in 1:5) {   \n  print(paste(\"Iteración número\", i)) \n  }\n\n[1] \"Iteración número 1\"\n[1] \"Iteración número 2\"\n[1] \"Iteración número 3\"\n[1] \"Iteración número 4\"\n[1] \"Iteración número 5\"\n\n\n\n\nwhile\nRepite una acción mientras se cumpla una condición.\n\ncontador &lt;- 1 \nwhile (contador &lt;= 3) {   \n  print(contador)   \n  contador &lt;- contador + 1 \n  }\n\n[1] 1\n[1] 2\n[1] 3\n\n\n\n\nrepeat\nEjecuta indefinidamente hasta alcanzar una instrucción de corte (break).\n\ni &lt;- 1 \nrepeat {   \n  print(i)   \n  i &lt;- i + 1   \nif (i &gt; 3) break \n}\n\n[1] 1\n[1] 2\n[1] 3\n\n\nEstas estructuras permiten realizar scripts más dinámicos, automatizar tareas y procesar datos de forma más eficiente."
  },
  {
    "objectID": "ejercicios.html#ejercicios-3",
    "href": "ejercicios.html#ejercicios-3",
    "title": "Ejercicios",
    "section": "Ejercicios # 3",
    "text": "Ejercicios # 3\nUtilizando la base de datos mtcars, resuelva los siguientes ejercicios:\n\nFiltrado y selección: Filtre los autos con más de 6 cilindros (cyl &gt; 6) y seleccione solo las columnas mpg, cyl y hp.\nReordenar filas: Ordene el dataset por consumo (mpg) ascendente y muestre las 10 primeras observaciones.\nRenombrar y mutar: Renombre wt a peso y cree una nueva columna potencia_peso como hp / peso.\nSummarise global: Calcule el promedio, mínimo y máximo de mpg para todo el dataset.\nSummarise por grupo: Obtenga el promedio de hp y el conteo de autos por cada número de engranajes (gear).\nGráfico de barras: Realice un barplot del promedio de mpg por número de cilindros.\nHistograma: Genere un histograma de la variable hp con 15 bins.\nBoxplot: Cree un boxplot de mpg agrupado por tipo de transmisión (am).\nGráfico de dispersión con color: Haga un scatter plot de wt vs mpg coloreado por número de cilindros.\nFacetas: Repita el gráfico de dispersión anterior usando facetas por gear.\nLoop for: Use un bucle for para imprimir la media de mpg para cada nivel de cyl.\nLoop while: Use un bucle while para sumar los primeros 5 valores de hp y mostrar el resultado.\nCase_when: Cree una columna eficiencia que asigne “Alta” a mpg &gt; 25, “Media” si mpg entre 20 y 25, y “Baja” para mpg &lt; 20.\nif_else: Añada una columna bajo_peso que indique “Sí” si wt &lt; 3 y “No” en caso contrario."
  },
  {
    "objectID": "presentation/clase_1_ppt.html#quarto",
    "href": "presentation/clase_1_ppt.html#quarto",
    "title": "Clase 1",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished presentation. To learn more about Quarto presentations see https://quarto.org/docs/presentations/."
  },
  {
    "objectID": "presentation/clase_1_ppt.html#bullets",
    "href": "presentation/clase_1_ppt.html#bullets",
    "title": "Clase 1",
    "section": "Bullets",
    "text": "Bullets\nWhen you click the Render button a document will be generated that includes:\n\nContent authored with markdown\nOutput from executable code"
  },
  {
    "objectID": "presentation/clase_1_ppt.html#code",
    "href": "presentation/clase_1_ppt.html#code",
    "title": "Clase 1",
    "section": "Code",
    "text": "Code\nWhen you click the Render button a presentation will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\n[1] 2"
  },
  {
    "objectID": "clase_4.html",
    "href": "clase_4.html",
    "title": "Clase 4",
    "section": "",
    "text": "Introducción\nEn esta clase trabajaremos con un Modelo Insumo-Producto (MIP) de Argentina.\nEl objetivo es que el estudiante comprenda cómo se construye la matriz de coeficientes, la inversa de Leontief y cómo, a partir de shocks de demanda, se estiman efectos sobre producción, empleo, valor agregado y recaudación.\n\n\n\nCarga de paquetes\n\nlibrary(ggplot2)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ lubridate 1.9.2     ✔ tibble    3.2.1\n✔ purrr     1.0.1     ✔ tidyr     1.3.0\n✔ readr     2.1.4     \n\n\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nCarga de datos\nLeemos las descripciones de actividades y la matriz insumo-producto (industria × industria).\n\nn &lt;- 10\nsectores &lt;- paste0(\"Sector_\", 1:n)\n\n# Matriz de transacciones intermedias (Z)\nZ &lt;- matrix(sample(50:200, n*n, replace=TRUE), nrow=n, ncol=n,\n            dimnames = list(sectores, sectores))\n\n# Vector de producción bruta (VBP): suma de filas de Z + demanda final\nY &lt;- matrix(sample(100:500, n, replace=TRUE), nrow=n, dimnames = list(sectores, \"Demanda Final\"))\nVBP &lt;- rowSums(Z) + Y\n\n# Valor agregado simulado\nVA &lt;- round(VBP * runif(n, 0.3, 0.6))\n\n# Recaudación simulada (impuestos)\nreca &lt;- round(VBP * runif(n, 0.1, 0.2))\n\n# Recaudación simulada (impuestos)\nimpo &lt;- round(VBP * runif(n, 0.1, 0.2))\n\n# Recaudación simulada (impuestos)\nexpo &lt;- round(VBP * runif(n, 0.1, 0.2))\n\n# Empleo simulado\nlabor &lt;- round(VBP * runif(n, 0.05, 0.15))\n\n\n\n\nConstrucción de la inversa de Leontief\nEl corazón del modelo es la matriz de coeficientes técnicos \\(A\\) y su inversa:\n[ B = (I - A)^{-1} ]\n\niden &lt;- diag(n)\ntot &lt;- VBP\ndiag_tot &lt;- diag(c(1/tot))\n\nA &lt;- Z %*% diag_tot  \nA[is.nan(A)] &lt;- 0\n\nB &lt;- solve(iden - A)\n\n\n\n\nSimulaciones de demanda\nLeemos shocks de demanda final (ΔY) y construimos el vector de cambios ajustado por contenido nacional.\n\nf.chg.nac &lt;- Y * 0.10\n\n# Resolvemos: ΔX = B * ΔY\nx.chg &lt;- B %*% as.matrix(f.chg.nac)\n\n\n\n\nImpactos en empleo, recaudación y VA\n\nEmpleo\nCalculamos un coeficiente trabajo/producto y estimamos los cambios en empleo.\n\nLsobreVBP &lt;- labor / VBP\nlab.chg &lt;- LsobreVBP * x.chg\n\n\n\nRecaudación\nA partir de los impuestos por unidad de producto.\n\nTAXsobreVBP &lt;- reca / VBP\ntax.chg &lt;- TAXsobreVBP * x.chg\n\n\n\nValor agregado\nCalculamos proporcional al producto sectorial.\n\nVAsobreVBP &lt;- VA / VBP\nva.chg &lt;- VAsobreVBP * x.chg\n\n\n\n\n\nResultados agregados\nCreamos una tabla con los efectos totales sobre producción, VA y recaudación.\n\ngral_res &lt;- data.frame(\n  Variable = c(\"Producción\", \"Valor Agregado\", \"Recaudación\"),\n  Base = c(sum(VBP), sum(VA), sum(reca)),\n  Cambio = c(sum(x.chg), sum(va.chg), sum(tax.chg))\n) %&gt;%\n  mutate(Cambio_pct = 100 * Cambio/Base)\n\ngral_res\n\n        Variable  Base Cambio Cambio_pct\n1     Producción 15357 1535.7         10\n2 Valor Agregado  7280  728.0         10\n3    Recaudación  2452  245.2         10\n\n\nVisualización:\n\nggplot(gral_res, aes(x=Variable, y=Cambio)) +\n  geom_col(fill=\"steelblue\") +\n  theme_minimal() +\n  labs(y=\"Cambio absoluto\", title=\"Impacto agregado (simulado)\")\n\n\n\n\n\n\n\n\n\n\n\nConclusión\nEn esta clase vimos cómo a partir de una matriz insumo-producto se pueden:\n\nConstruir coeficientes técnicos y la inversa de Leontief.\n\nSimular shocks de demanda final.\n\nEstimar impactos en producción, valor agregado, recaudación y empleo.\n\nEste marco es muy útil para el análisis de política económica y la planificación sectorial."
  },
  {
    "objectID": "ejercicios.html#ejercicios-4",
    "href": "ejercicios.html#ejercicios-4",
    "title": "Ejercicios",
    "section": "Ejercicios # 4 |",
    "text": "Ejercicios # 4 |\n\n\n\n\n\n\nEn este ejercicio vamos a trabajar con un Proyecto de Conectividad .\nEl objetivo es clasificar los gastos del proyecto en componentes nacionales e importados, siguiendo categorías utilizadas en las tablas insumo-producto.\n\n\nLa consigna:\n1. Revisar la información financiera.\n2. Convertir los montos de dólares a precios del año base de la matriz.\n3. Clasificar el gasto en materiales, trabajo, servicios y equipos según el origen (nacional o importado)."
  }
]